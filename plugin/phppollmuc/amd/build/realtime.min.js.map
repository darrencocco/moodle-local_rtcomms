{"version":3,"sources":["../src/realtime.js"],"names":["define","PubSub","RealTimeEvents","api","params","channels","requestsCounter","pollURL","ajax","XMLHttpRequest","json","timeout","checkRequestCounter","curDate","Date","curTime","getTime","push","slice","length","publish","CONNECTION_LOST","onreadystatechange","readyState","DONE","status","JSON","parse","responseText","setTimeout","poll","events","i","EVENT","fromid","id","resetTimeout","queueNextPoll","url","encodeURIComponent","userid","token","channelParams","reduce","accumulator","current","context","component","area","itemId","fromTimestamp","open","send","plugin","init","userId","pollURLParam","setImplementation","subscribe","fromId","fromTimeStamp","channelToSubTo"],"mappings":"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","sourcesContent":["/**\n * Real time events\n *\n * @module     realtimeplugin_phppollmuc/realtime\n * @package    realtimeplugin_phppollmuc\n * @copyright  2022 Darren Cocco\n */\ndefine(['core/pubsub', 'tool_realtime/events', 'tool_realtime/api'], function(PubSub, RealTimeEvents, api) {\n\n    let params;\n    let channels = [];\n    let requestsCounter = [];\n    let pollURL;\n    let ajax = new XMLHttpRequest();\n    let json;\n    let timeout;\n\n    var checkRequestCounter = function() {\n        var curDate = new Date(),\n            curTime = curDate.getTime();\n        requestsCounter.push(curTime);\n        requestsCounter = requestsCounter.slice(-10);\n        // If there were 10 requests in less than 5 seconds, it must be an error. Stop polling.\n        if (requestsCounter.length >= 10 && curTime - requestsCounter[0] < 5000) {\n            PubSub.publish(RealTimeEvents.CONNECTION_LOST, {});\n            return false;\n        }\n        return true;\n    };\n\n    ajax.onreadystatechange = function() {\n        if (this.readyState === XMLHttpRequest.DONE) {\n            if (this.status === 200) {\n                try {\n                    json = JSON.parse(this.responseText);\n                } catch {\n                    setTimeout(poll, params.timeout);\n                    return;\n                }\n\n                // Process results - trigger all necessary Javascript/jQuery events.\n                var events = json.events;\n                for (var i in events) {\n                    PubSub.publish(RealTimeEvents.EVENT, events[i]);\n                    // Remember the last id.\n                    params.fromid = events[i].id;\n                }\n            }\n            resetTimeout();\n            queueNextPoll();\n        }\n    };\n\n    let poll = function() {\n        if (!checkRequestCounter() || channels.length < 1) {\n            return;\n        }\n\n        let url = pollURL + '?userid=' + encodeURIComponent(params.userid) + '&token=' +\n            encodeURIComponent(params.token) + '&fromid=' + encodeURIComponent(params.fromid);\n\n        let channelParams = channels.reduce((accumulator, current) => {\n            return accumulator + current.context + \":\" + current.component + \":\"\n                + current.area + \":\" + current.itemId + \":\" + current.fromTimestamp + \";\";\n        }, \"\");\n\n        ajax.open('GET', url + \"&channel=\" + channelParams, true);\n        ajax.send();\n    };\n\n    let queueNextPoll = () => {\n        if (timeout === null) {\n            timeout = setTimeout(poll, params.timeout);\n        }\n    };\n\n    let resetTimeout = () => {\n        timeout = null;\n    };\n\n    let plugin = {\n        init: function(userId, token, pollURLParam, timeout) {\n            if (params && params.userid) {\n                // Log console dev error.\n            } else {\n                params = {\n                    userid: userId,\n                    token: token,\n                    timeout: timeout,\n                };\n            }\n            pollURL = pollURLParam;\n            api.setImplementation(plugin);\n        },\n        subscribe: function(context, component, area, itemId, fromId, fromTimeStamp) {\n            params.fromid = fromId;\n            let channelToSubTo = {\n                context: context,\n                component: component,\n                area: area,\n                itemId: itemId,\n                fromTimestamp: fromTimeStamp,\n            };\n            if (channelToSubTo) {\n                channels.push(channelToSubTo);\n            }\n            queueNextPoll();\n        }\n    };\n    return plugin;\n});"],"file":"realtime.min.js"}