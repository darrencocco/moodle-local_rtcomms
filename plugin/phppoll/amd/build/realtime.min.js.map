{"version":3,"file":"realtime.min.js","sources":["../src/realtime.js"],"sourcesContent":["/**\n * Real time events\n *\n * @module     rtcomms_phppoll/realtime\n * @copyright  2024 Darren Cocco\n */\ndefine(['tool_realtime/api'], function(api) {\n    const phpPollPrototype = {\n\n        pollType: {\n            short: 1,\n            long: 2,\n        },\n\n\n        ajaxOnReadyStateChange(self) {\n            return function() {\n                if (this.readyState === XMLHttpRequest.DONE) {\n                    if (this.status === 200) {\n                        try {\n                            let json = JSON.parse(this.responseText);\n                            if (!json.error) {\n                                // Process results - trigger all necessary Javascript/jQuery events.\n                                // FIXME: not handling Moodle errors correctly\n                                let events = json.events;\n                                for (let i in events) {\n                                    api.publish(events[i]);\n                                    // Remember the last id.\n                                    self.params.lastIdSeen = Number(events[i].id);\n                                }\n                                self.errorCounter = 0;\n                            } else {\n                                self.errorCounter++;\n                            }\n                        } catch {\n                            self.errorCounter++;\n                        }\n                    } else {\n                        self.errorCounter++;\n                    }\n                    self.resetTimeout();\n                    self.queueNextPoll();\n                }\n            };\n        },\n\n        poll() {\n            if (this.channels < 1) {\n                return;\n            }\n\n            if (this.errorCounter > this.params.maxFailures) {\n                // Notify subscribers that something has gone wrong.\n                api.connectionFailure();\n            }\n\n            let url = this.pollURL + '?userid=' + encodeURIComponent(this.params.userid) + '&token=' +\n            encodeURIComponent(this.params.token) +\n                (this.params.lastIdSeen === -1 ?\n                '&since=' + encodeURIComponent(this.params.earliestMessageCreationTime) :\n                '&lastidseen=' + encodeURIComponent(this.params.lastIdSeen));\n\n            this.ajax.open('GET', url, true);\n            this.ajax.send();\n        },\n\n        queueNextPoll() {\n            if (!this.timeout) {\n                this.timeout = setTimeout(this.poll.bind(this),\n                    Math.max(2 ** this.errorCounter * 1000, this.params.maxDelay));\n            }\n        },\n\n        resetTimeout() {\n            this.timeout = null;\n        },\n        init(userId, token, pollURLParam, maxDelay, maxFailures, earliestMessageCreationTime, pollType) {\n            if (this.params && this.params.userid) {\n                // Log console dev error.\n            } else {\n                this.params = {\n                    userid: userId,\n                    token: token,\n                    maxDelay: maxDelay,\n                    maxFailures: maxFailures,\n                    earliestMessageCreationTime: earliestMessageCreationTime,\n                    lastIdSeen: -1,\n                    pollType: pollType === 'short' ? pollType.short : pollType.long,\n                };\n            }\n            this.pollURL = pollURLParam;\n            this.ajax.onreadystatechange = this.ajaxOnReadyStateChange(this);\n            api.setImplementation(pub);\n        },\n        subscribe() {\n            this.channels++;\n            this.queueNextPoll();\n        }\n    };\n\n    /**\n     * Handles interacting with PHP Poll DB plugin.\n     * @constructor\n     */\n    function PhpPoll() {\n        this.params = null;\n        this.channels = 0;\n        this.pollURL = null;\n        this.ajax =  new XMLHttpRequest();\n        this.json = null;\n        this.timeout = null;\n        this.errorCounter = 0;\n    }\n    Object.assign(PhpPoll.prototype, phpPollPrototype);\n    let instance = new PhpPoll();\n    let pub = {\n        init: (userId, token, pollURLParam, maxDelay, maxFailures, earliestMessageCreationTime, pollType) => {\n            instance.init(userId, token, pollURLParam, maxDelay, maxFailures, earliestMessageCreationTime, pollType);\n        },\n        subscribe: () => {\n            instance.subscribe();\n        },\n    };\n    return pub;\n});"],"names":["define","api","phpPollPrototype","pollType","short","long","ajaxOnReadyStateChange","self","this","readyState","XMLHttpRequest","DONE","status","json","JSON","parse","responseText","error","errorCounter","events","i","publish","params","lastIdSeen","Number","id","resetTimeout","queueNextPoll","poll","channels","maxFailures","connectionFailure","url","pollURL","encodeURIComponent","userid","token","earliestMessageCreationTime","ajax","open","send","timeout","setTimeout","bind","Math","max","maxDelay","init","userId","pollURLParam","onreadystatechange","setImplementation","pub","subscribe","PhpPoll","Object","assign","prototype","instance"],"mappings":"AAMAA,yCAAO,CAAC,sBAAsB,SAASC,WAC7BC,iBAAmB,CAErBC,SAAU,CACNC,MAAO,EACPC,KAAM,GAIVC,uBAAuBC,MACZ,cACCC,KAAKC,aAAeC,eAAeC,KAAM,IACrB,MAAhBH,KAAKI,eAEGC,KAAOC,KAAKC,MAAMP,KAAKQ,iBACtBH,KAAKI,MAWNV,KAAKW,mBAXQ,KAGTC,OAASN,KAAKM,WACb,IAAIC,KAAKD,OACVlB,IAAIoB,QAAQF,OAAOC,IAEnBb,KAAKe,OAAOC,WAAaC,OAAOL,OAAOC,GAAGK,IAE9ClB,KAAKW,aAAe,GAI1B,MACEX,KAAKW,oBAGTX,KAAKW,eAETX,KAAKmB,eACLnB,KAAKoB,kBAKjBC,UACQpB,KAAKqB,SAAW,SAIhBrB,KAAKU,aAAeV,KAAKc,OAAOQ,aAEhC7B,IAAI8B,wBAGJC,IAAMxB,KAAKyB,QAAU,WAAaC,mBAAmB1B,KAAKc,OAAOa,QAAU,UAC/ED,mBAAmB1B,KAAKc,OAAOc,SACE,IAA5B5B,KAAKc,OAAOC,WACb,UAAYW,mBAAmB1B,KAAKc,OAAOe,6BAC3C,eAAiBH,mBAAmB1B,KAAKc,OAAOC,kBAE/Ce,KAAKC,KAAK,MAAOP,KAAK,QACtBM,KAAKE,QAGdb,gBACSnB,KAAKiC,eACDA,QAAUC,WAAWlC,KAAKoB,KAAKe,KAAKnC,MACrCoC,KAAKC,IAAI,GAAKrC,KAAKU,aAAe,IAAMV,KAAKc,OAAOwB,aAIhEpB,oBACSe,QAAU,MAEnBM,KAAKC,OAAQZ,MAAOa,aAAcH,SAAUhB,YAAaO,4BAA6BlC,UAC9EK,KAAKc,QAAUd,KAAKc,OAAOa,cAGtBb,OAAS,CACVa,OAAQa,OACRZ,MAAOA,MACPU,SAAUA,SACVhB,YAAaA,YACbO,4BAA6BA,4BAC7Bd,YAAa,EACbpB,SAAuB,UAAbA,SAAuBA,SAASC,MAAQD,SAASE,YAG9D4B,QAAUgB,kBACVX,KAAKY,mBAAqB1C,KAAKF,uBAAuBE,MAC3DP,IAAIkD,kBAAkBC,MAE1BC,iBACSxB,gBACAF,2BAQJ2B,eACAhC,OAAS,UACTO,SAAW,OACXI,QAAU,UACVK,KAAQ,IAAI5B,oBACZG,KAAO,UACP4B,QAAU,UACVvB,aAAe,EAExBqC,OAAOC,OAAOF,QAAQG,UAAWvD,sBAC7BwD,SAAW,IAAIJ,QACfF,IAAM,CACNL,KAAM,CAACC,OAAQZ,MAAOa,aAAcH,SAAUhB,YAAaO,4BAA6BlC,YACpFuD,SAASX,KAAKC,OAAQZ,MAAOa,aAAcH,SAAUhB,YAAaO,4BAA6BlC,WAEnGkD,UAAW,KACPK,SAASL,qBAGVD"}