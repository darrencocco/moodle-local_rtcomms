{"version":3,"file":"realtime.min.js","sources":["../src/realtime.js"],"sourcesContent":["/**\n * Real time events\n *\n * @module     rtcomms_phppoll/realtime\n * @copyright  2024 Darren Cocco\n */\ndefine(['local_rtcomms/api', 'core/ajax'], function(api, ajax) {\n    const phpPollPrototype = {\n\n        pollType: {\n            short: 1,\n            long: 2,\n        },\n\n\n        ajaxOnReadyStateChange(self) {\n            return function() {\n                if (this.readyState === XMLHttpRequest.DONE) {\n                    if (this.status === 200) {\n                        try {\n                            let json = JSON.parse(this.responseText);\n                            if (!json.error) {\n                                // Process results - trigger all necessary Javascript/jQuery events.\n                                // FIXME: not handling Moodle errors correctly\n                                let events = json.events;\n                                for (let i in events) {\n                                    api.publish(events[i]);\n                                    // Remember the last id.\n                                    self.params.lastIdSeen = Number(events[i].id);\n                                }\n                                self.errorCounter = 0;\n                            } else {\n                                self.errorCounter++;\n                            }\n                        } catch {\n                            self.errorCounter++;\n                        }\n                    } else {\n                        self.errorCounter++;\n                    }\n                    self.resetTimeout();\n                    self.queueNextPoll();\n                }\n            };\n        },\n\n        poll() {\n            if (this.channels < 1) {\n                return;\n            }\n\n            if (this.errorCounter > this.params.maxFailures) {\n                // Notify subscribers that something has gone wrong.\n                api.connectionFailure();\n            }\n\n            let url = this.pollURL + '?userid=' + encodeURIComponent(this.params.userid) + '&token=' +\n            encodeURIComponent(this.params.token) +\n                (this.params.lastIdSeen === -1 ?\n                '&since=' + encodeURIComponent(this.params.earliestMessageCreationTime) :\n                '&lastidseen=' + encodeURIComponent(this.params.lastIdSeen));\n\n            this.ajax.open('GET', url, true);\n            this.ajax.send();\n        },\n\n        queueNextPoll() {\n            if (!this.timeout) {\n                this.timeout = setTimeout(this.poll.bind(this),\n                    Math.max(2 ** this.errorCounter * 1000, this.params.maxDelay));\n            }\n        },\n\n        resetTimeout() {\n            this.timeout = null;\n        },\n        init(userId, token, pollURLParam, maxDelay, maxFailures, earliestMessageCreationTime, pollType) {\n            if (this.params && this.params.userid) {\n                // Log console dev error.\n            } else {\n                this.params = {\n                    userid: userId,\n                    token: token,\n                    maxDelay: maxDelay,\n                    maxFailures: maxFailures,\n                    earliestMessageCreationTime: earliestMessageCreationTime,\n                    lastIdSeen: -1,\n                    pollType: pollType === 'short' ? pollType.short : pollType.long,\n                };\n            }\n            this.pollURL = pollURLParam;\n            this.ajax.onreadystatechange = this.ajaxOnReadyStateChange(this);\n            api.setImplementation(pub);\n        },\n        subscribe() {\n            this.channels++;\n            this.queueNextPoll();\n        },\n        sendToServer(context, component, area, itemId, payload) {\n            ajax.call([{\n                methodname: 'rtcomms_phppoll_send',\n                args: {\n                    contextid: context,\n                    component: component,\n                    area: area,\n                    itemid: itemId,\n                    payload: JSON.stringify(payload),\n                },\n            }]);\n        }\n    };\n\n    /**\n     * Handles interacting with PHP Poll DB plugin.\n     * @constructor\n     */\n    function PhpPoll() {\n        this.params = null;\n        this.channels = 0;\n        this.pollURL = null;\n        this.ajax =  new XMLHttpRequest();\n        this.json = null;\n        this.timeout = null;\n        this.errorCounter = 0;\n    }\n    Object.assign(PhpPoll.prototype, phpPollPrototype);\n    let instance = new PhpPoll();\n    let pub = {\n        init: (configuration) => {\n            instance.init(configuration.userId, configuration.token, configuration.pollURLParam,\n                configuration.maxDelay, configuration.maxFailures, configuration.earliestMessageCreationTime,\n                configuration.pollType);\n        },\n        subscribe: () => {\n            instance.subscribe();\n        },\n        sendToServer: (context, component, area, itemId, payload) => {\n            instance.sendToServer(context, component, area, itemId, payload);\n        },\n    };\n    return pub;\n});"],"names":["define","api","ajax","phpPollPrototype","pollType","short","long","ajaxOnReadyStateChange","self","this","readyState","XMLHttpRequest","DONE","status","json","JSON","parse","responseText","error","errorCounter","events","i","publish","params","lastIdSeen","Number","id","resetTimeout","queueNextPoll","poll","channels","maxFailures","connectionFailure","url","pollURL","encodeURIComponent","userid","token","earliestMessageCreationTime","open","send","timeout","setTimeout","bind","Math","max","maxDelay","init","userId","pollURLParam","onreadystatechange","setImplementation","pub","subscribe","sendToServer","context","component","area","itemId","payload","call","methodname","args","contextid","itemid","stringify","PhpPoll","Object","assign","prototype","instance","configuration"],"mappings":"AAMAA,kCAAO,CAAC,oBAAqB,cAAc,SAASC,IAAKC,YAC/CC,iBAAmB,CAErBC,SAAU,CACNC,MAAO,EACPC,KAAM,GAIVC,uBAAuBC,MACZ,cACCC,KAAKC,aAAeC,eAAeC,KAAM,IACrB,MAAhBH,KAAKI,eAEGC,KAAOC,KAAKC,MAAMP,KAAKQ,iBACtBH,KAAKI,MAWNV,KAAKW,mBAXQ,KAGTC,OAASN,KAAKM,WACb,IAAIC,KAAKD,OACVnB,IAAIqB,QAAQF,OAAOC,IAEnBb,KAAKe,OAAOC,WAAaC,OAAOL,OAAOC,GAAGK,IAE9ClB,KAAKW,aAAe,GAI1B,MACEX,KAAKW,oBAGTX,KAAKW,eAETX,KAAKmB,eACLnB,KAAKoB,kBAKjBC,UACQpB,KAAKqB,SAAW,SAIhBrB,KAAKU,aAAeV,KAAKc,OAAOQ,aAEhC9B,IAAI+B,wBAGJC,IAAMxB,KAAKyB,QAAU,WAAaC,mBAAmB1B,KAAKc,OAAOa,QAAU,UAC/ED,mBAAmB1B,KAAKc,OAAOc,SACE,IAA5B5B,KAAKc,OAAOC,WACb,UAAYW,mBAAmB1B,KAAKc,OAAOe,6BAC3C,eAAiBH,mBAAmB1B,KAAKc,OAAOC,kBAE/CtB,KAAKqC,KAAK,MAAON,KAAK,QACtB/B,KAAKsC,QAGdZ,gBACSnB,KAAKgC,eACDA,QAAUC,WAAWjC,KAAKoB,KAAKc,KAAKlC,MACrCmC,KAAKC,IAAI,GAAKpC,KAAKU,aAAe,IAAMV,KAAKc,OAAOuB,aAIhEnB,oBACSc,QAAU,MAEnBM,KAAKC,OAAQX,MAAOY,aAAcH,SAAUf,YAAaO,4BAA6BlC,UAC9EK,KAAKc,QAAUd,KAAKc,OAAOa,cAGtBb,OAAS,CACVa,OAAQY,OACRX,MAAOA,MACPS,SAAUA,SACVf,YAAaA,YACbO,4BAA6BA,4BAC7Bd,YAAa,EACbpB,SAAuB,UAAbA,SAAuBA,SAASC,MAAQD,SAASE,YAG9D4B,QAAUe,kBACV/C,KAAKgD,mBAAqBzC,KAAKF,uBAAuBE,MAC3DR,IAAIkD,kBAAkBC,MAE1BC,iBACSvB,gBACAF,iBAET0B,aAAaC,QAASC,UAAWC,KAAMC,OAAQC,SAC3CzD,KAAK0D,KAAK,CAAC,CACPC,WAAY,uBACZC,KAAM,CACFC,UAAWR,QACXC,UAAWA,UACXC,KAAMA,KACNO,OAAQN,OACRC,QAAS5C,KAAKkD,UAAUN,wBAU/BO,eACA3C,OAAS,UACTO,SAAW,OACXI,QAAU,UACVhC,KAAQ,IAAIS,oBACZG,KAAO,UACP2B,QAAU,UACVtB,aAAe,EAExBgD,OAAOC,OAAOF,QAAQG,UAAWlE,sBAC7BmE,SAAW,IAAIJ,QACfd,IAAM,CACNL,KAAOwB,gBACHD,SAASvB,KAAKwB,cAAcvB,OAAQuB,cAAclC,MAAOkC,cAActB,aACnEsB,cAAczB,SAAUyB,cAAcxC,YAAawC,cAAcjC,4BACjEiC,cAAcnE,WAEtBiD,UAAW,KACPiB,SAASjB,aAEbC,aAAc,CAACC,QAASC,UAAWC,KAAMC,OAAQC,WAC7CW,SAAShB,aAAaC,QAASC,UAAWC,KAAMC,OAAQC,kBAGzDP"}